# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

defaults: &defaults
  docker:
    - image: cimg/node:13.8.0

# orbs:
#   aws-cli: circleci/aws-cli@2.0.3


commands:
  print_pipeline_id:
    description: "A very simple commnad for demo purposes"
    parameters:
      to:
        type: string
        default: "world"
    steps:
      - run: echo Hello << parameters.to>>. My my workflow id is = ${CIRCLE_WORKFLOW_ID}


# orbs:
#   welcome: circleci/welcome-orb@0.4.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  
  create_infrastructure:
    docker:
      - image: cimg/aws:2023.01
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region us-east-1
      # Fail the job intentionally to simulate an error.
      # Uncomment the line below if you want to fail the current step
      # - run: return 1
      # - destroy_environment
      

  # say-hello:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: cimg/base:stable
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say hello"
  #         command: "echo Hello, World!"
 
  # print_hello:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo hello
  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo world
  # my_intentional_error:
  #   <<: *defaults 
  #   steps:
  #     - run: exit 1
  #     - run:
  #         name: onError
  #         command: echo "Hello error"
  #         when: on_fail


  # my_pipeline_id:
  #   <<: *defaults
  #   steps:
  #     - print_pipeline_id

  configure_infrastructure: 
    docker:
      # - image: python:3.7-alpine3.11
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e8:8c:9d:22:3d:ac:9d:a4:a0:81:e7:cd:14:f8:06:48"]
      - run:
          name: Install Ansible
          command: |
            # install the dependencies needed for your playbook
            apt-get update -y
            apt install ansible -y
            which ansible 
            # apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt main.yml


workflows:
  my_workflow:
    jobs:
      # - welcome/run
      # - print_hello
      # - print_world:
      #     requires:
      #       - print_hello
      # - my_pipeline_id
      # - my_intentional_error
      # - create_infrastructure
      - configure_infrastructure
          